package sk.sav.bot.dataflos.gui;

import java.awt.Toolkit;
import sk.sav.bot.dataflos.entity.Brumit4;
import sk.sav.bot.dataflos.entity.Casopisy;
import sk.sav.bot.dataflos.entity.FamilyApg;
import sk.sav.bot.dataflos.entity.Ftgokres;
import sk.sav.bot.dataflos.entity.Genus;
import sk.sav.bot.dataflos.entity.Herbar;
import sk.sav.bot.dataflos.entity.Kvadrant;
import sk.sav.bot.dataflos.entity.ListOfSpecies;
import sk.sav.bot.dataflos.entity.MenaZberRev;
import sk.sav.bot.dataflos.entity.Obec;
import sk.sav.bot.dataflos.entity.Udaj;
import sk.sav.bot.dataflos.entity.interf.Entity;
import sk.sav.bot.dataflos.main.MainFrame;
import sk.sav.bot.dataflos.models.RecordsInsertedModel;
import sk.sav.bot.dataflos.util.HibernateQuery;
import sk.sav.bot.dataflos.util.TableColumnsWidthCounter;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.AbstractAction;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.table.TableRowSorter;
import org.apache.log4j.Logger;
import sk.sav.bot.dataflos.entity.TaxonEndemizmus;
import sk.sav.bot.dataflos.entity.TaxonOhrozenost;
import sk.sav.bot.dataflos.entity.TaxonPovodnost;
import sk.sav.bot.dataflos.verify.DataVerifier;
import sk.sav.bot.dataflos.verify.PositiveNumberVerifier;

/**
 *
 * @author Jakub
 */
public class FilterRecordsOverview extends javax.swing.JPanel {

    RecordsInsertedModel model;
    List<Udaj> container;
    
    LoadingDialog loadingDialog;
    FilterTask filterTask;
    
    private HibernateQuery hq;
    private RecordsAndFiltersLoadingTask recordsLoadingTask;
    
    private static Logger log = Logger.getLogger(FilterRecordsOverview.class.getName());
    private static final int BARCODE_WIDTH = 100;
    
    String callSource;
    
    /**
     * Creates new form FilterRecordsOverview.
     */
    public FilterRecordsOverview() {

        initComponents();
        txtActualPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                RecordsInsertedModel rim = (RecordsInsertedModel) getRecordsOverviewTable().getModel();
                
                // znemoznime nekorektne vstupy
                if (!DataVerifier.isIntNumber(txtActualPage.getText())){
                    txtActualPage.setText(String.valueOf(rim.getPageOffset()+1));
                } else if (Integer.parseInt(txtActualPage.getText()) < 1){
                    txtActualPage.setText("1");
                } else if (Integer.parseInt(txtActualPage.getText()) > Integer.parseInt(txtPagesCount.getText())){
                    txtActualPage.setText(txtPagesCount.getText());
                }
                
                rim.setPageOffset(Integer.parseInt(txtActualPage.getText())-1);
                rim.fireTableDataChanged();
                
                //ak sme na zaciatku alebo na konci, znefunkcnime prislusne tlacitka
                if (Integer.parseInt(txtActualPage.getText()) == 1){
                    btnRecordsPrevPage.setEnabled(false);
                } else {
                    btnRecordsPrevPage.setEnabled(true);
                }
                if (Integer.parseInt(txtActualPage.getText()) == Integer.parseInt(txtPagesCount.getText())){
                    btnRecordsNextPage.setEnabled(false);
                } else {
                    btnRecordsNextPage.setEnabled(true);
                }
            }
        });  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menoButtonGroup = new javax.swing.ButtonGroup();
        spFilteredRecordsOverview = new javax.swing.JScrollPane();
        recordsOverviewTable = new javax.swing.JTable();
        lblRecCount = new javax.swing.JLabel();
        lblZoznam = new javax.swing.JLabel();
        lblFilerPanel = new javax.swing.JLabel();
        lblFilterPanelNote = new javax.swing.JLabel();
        btnDoFilter = new javax.swing.JButton();
        btnClearFilter = new javax.swing.JButton();
        btnRecordsPrevPage = new javax.swing.JButton();
        btnRecordsNextPage = new javax.swing.JButton();
        lblSlash = new javax.swing.JLabel();
        txtActualPage = new javax.swing.JTextField();
        txtPagesCount = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        cbMyOwnRecords = new javax.swing.JCheckBox();
        btnActualizeData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        filterPanel = new javax.swing.JPanel();
        rcbxDruh = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel1 = new javax.swing.JLabel();
        rcbxRod = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rcbxAutorZberu = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel5 = new javax.swing.JLabel();
        rcbxStat = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel6 = new javax.swing.JLabel();
        rcbxFTGokres = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel7 = new javax.swing.JLabel();
        rcbxObec = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel8 = new javax.swing.JLabel();
        rcbxKvadrant = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel9 = new javax.swing.JLabel();
        rcbxAutorPublikacie = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel10 = new javax.swing.JLabel();
        rcbxCasopis = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel11 = new javax.swing.JLabel();
        rcbxRok = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel12 = new javax.swing.JLabel();
        rcbxHerbar = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        rcbxCelad = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        txtTaxonMatch = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtIDudaj = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtCisloPolozky = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        txtCiarKod = new javax.swing.JTextField();
        rbPoslRevMeno = new javax.swing.JRadioButton();
        rbPovodPublMeno = new javax.swing.JRadioButton();
        rcbxOhrozenost = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        rcbxPovodnost = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        rcbxEndemizmus = new sk.sav.bot.dataflos.gui.ResizeableComboBox();
        cbTaxonOchrana = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtRecNumberToShow = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();

        recordsOverviewTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        spFilteredRecordsOverview.setViewportView(recordsOverviewTable);

        lblRecCount.setText("Počet nájdených údajov: ");

        lblZoznam.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblZoznam.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblZoznam.setText("Zoznam výsledkov");

        lblFilerPanel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblFilerPanel.setText("Vyhľadávanie údajov podľa:");

        lblFilterPanelNote.setText("(zvoľte jedno alebo viac kritérií)");

        btnDoFilter.setAction(new DoFilterAction());
        btnDoFilter.setText("Vyhľadaj podľa kritérii");

        btnClearFilter.setAction(new ClearFilterAction());
        btnClearFilter.setText("Zruš kritériá");

        btnRecordsPrevPage.setAction(new PreviousFilterPageAction());
        btnRecordsPrevPage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tab_left.png"))); // NOI18N
        btnRecordsPrevPage.setText("Predchádzajúca");
        btnRecordsPrevPage.setEnabled(false);
        btnRecordsPrevPage.setMaximumSize(new java.awt.Dimension(100, 25));
        btnRecordsPrevPage.setMinimumSize(new java.awt.Dimension(100, 25));
        btnRecordsPrevPage.setPreferredSize(new java.awt.Dimension(100, 25));

        btnRecordsNextPage.setAction(new NextFilterPageAction());
        btnRecordsNextPage.setIcon(new ImageIcon(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/tab_right.png"))));
        btnRecordsNextPage.setText("Nasledujúca");
        btnRecordsNextPage.setEnabled(false);
        btnRecordsNextPage.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btnRecordsNextPage.setMaximumSize(new java.awt.Dimension(100, 25));
        btnRecordsNextPage.setMinimumSize(new java.awt.Dimension(100, 25));
        btnRecordsNextPage.setPreferredSize(new java.awt.Dimension(100, 25));

        lblSlash.setText("z");

        txtActualPage.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        txtActualPage.setText(" ");

        txtPagesCount.setEditable(false);

        jLabel17.setText("Stránka čislo:");

        cbMyOwnRecords.setAction(new ActualizeDataAction());
        cbMyOwnRecords.setSelected(true);
        cbMyOwnRecords.setText("iba vlastné údaje");

        btnActualizeData.setAction(new ActualizeDataAction());
        btnActualizeData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh_icon_16.png"))); // NOI18N

        filterPanel.setAutoscrolls(true);
        filterPanel.setMaximumSize(new java.awt.Dimension(300, 492));

        rcbxDruh.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel1.setText("Druh");

        rcbxRod.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel2.setText("Čeľaď - podľa APG");

        jLabel4.setText("Výraz v názve druhu");

        rcbxAutorZberu.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel5.setText("Autor zberu");

        rcbxStat.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel6.setText("Štát");

        rcbxFTGokres.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel7.setText("Fytogeogr. (pod)okres");

        rcbxObec.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel8.setText("Najbližšia obec");

        rcbxKvadrant.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel9.setText("Číslo (pod)štvorca");

        rcbxAutorPublikacie.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel10.setText("Autor publikácie");

        rcbxCasopis.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel11.setText("Názov časopisu");

        rcbxRok.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel12.setText("Rok vydania");

        rcbxHerbar.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel13.setText("Herbár");

        jLabel3.setText("Rod");

        rcbxCelad.setMaximumSize(new java.awt.Dimension(123, 26));

        jLabel14.setText("ID údaja");

        txtIDudaj.setInputVerifier(new PositiveNumberVerifier());

        jLabel15.setText("(Prír.) Číslo položky");

        jLabel16.setText("Číslo čiarového kódu");

        menoButtonGroup.add(rbPoslRevMeno);
        rbPoslRevMeno.setText("meno po poslednej revízii");

        menoButtonGroup.add(rbPovodPublMeno);
        rbPovodPublMeno.setText("pôvodne publikované meno");

        rcbxOhrozenost.setMaximumSize(new java.awt.Dimension(123, 26));

        rcbxPovodnost.setMaximumSize(new java.awt.Dimension(123, 26));

        rcbxEndemizmus.setMaximumSize(new java.awt.Dimension(123, 26));

        cbTaxonOchrana.setText("Zákonná ochrana");

        jLabel20.setText("Ohrozenosť");

        jLabel22.setText("Endemizmus");

        jLabel23.setText("Pôvodnosť");

        jLabel25.setText("Status na Slovensku:");

        jLabel19.setText("zobraziť posledných ");

        txtRecNumberToShow.setInputVerifier(new PositiveNumberVerifier());

        jLabel18.setText("údajov");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel3)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel20)
                    .addComponent(jLabel22)
                    .addComponent(jLabel23)
                    .addComponent(jLabel25)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rcbxEndemizmus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxPovodnost, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(txtCisloPolozky)
                    .addComponent(txtIDudaj)
                    .addComponent(rcbxHerbar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxRok, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxCasopis, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxAutorPublikacie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxKvadrant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxObec, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxFTGokres, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxStat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxAutorZberu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxRod, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxDruh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(rcbxCelad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTaxonMatch)
                    .addComponent(rbPoslRevMeno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbPovodPublMeno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rcbxOhrozenost, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(cbTaxonOchrana)
                    .addComponent(txtCiarKod))
                .addGap(10, 10, 10))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtRecNumberToShow, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxDruh, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxRod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(rcbxCelad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTaxonMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(rbPoslRevMeno, javax.swing.GroupLayout.PREFERRED_SIZE, 19, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addComponent(rbPovodPublMeno, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbTaxonOchrana)
                    .addComponent(jLabel25))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxOhrozenost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxEndemizmus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxPovodnost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxAutorZberu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxStat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxFTGokres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxObec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxKvadrant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxAutorPublikacie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxCasopis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxRok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rcbxHerbar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtIDudaj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtCisloPolozky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtCiarKod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRecNumberToShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19)))
        );

        rcbxDruh.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxRod.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxAutorZberu.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxStat.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxFTGokres.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxObec.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxKvadrant.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxAutorPublikacie.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxCasopis.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxRok.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxHerbar.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxCelad.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxDruh.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxDruh.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");
        rcbxDruh.setPrototypeDisplayValue("XXXXXXXXXXXXXXXXXX");

        jScrollPane1.setViewportView(filterPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnClearFilter)
                            .addGap(70, 70, 70)
                            .addComponent(btnDoFilter))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFilerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFilterPanelNote)
                                .addGap(39, 39, 39)
                                .addComponent(cbMyOwnRecords))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(lblZoznam, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(122, 122, 122)
                        .addComponent(btnActualizeData, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(spFilteredRecordsOverview)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecordsPrevPage, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtActualPage, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSlash)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPagesCount, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRecordsNextPage, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                        .addComponent(lblRecCount)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFilerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFilterPanelNote)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnActualizeData)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbMyOwnRecords)
                                .addComponent(lblZoznam, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spFilteredRecordsOverview)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDoFilter)
                    .addComponent(btnClearFilter)
                    .addComponent(lblRecCount)
                    .addComponent(btnRecordsPrevPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRecordsNextPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSlash)
                    .addComponent(txtActualPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPagesCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnActualizeData;
    javax.swing.JButton btnClearFilter;
    javax.swing.JButton btnDoFilter;
    javax.swing.JButton btnRecordsNextPage;
    javax.swing.JButton btnRecordsPrevPage;
    javax.swing.JCheckBox cbMyOwnRecords;
    javax.swing.JCheckBox cbTaxonOchrana;
    javax.swing.JPanel filterPanel;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel10;
    javax.swing.JLabel jLabel11;
    javax.swing.JLabel jLabel12;
    javax.swing.JLabel jLabel13;
    javax.swing.JLabel jLabel14;
    javax.swing.JLabel jLabel15;
    javax.swing.JLabel jLabel16;
    javax.swing.JLabel jLabel17;
    javax.swing.JLabel jLabel18;
    javax.swing.JLabel jLabel19;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel20;
    javax.swing.JLabel jLabel22;
    javax.swing.JLabel jLabel23;
    javax.swing.JLabel jLabel25;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JLabel lblFilerPanel;
    javax.swing.JLabel lblFilterPanelNote;
    javax.swing.JLabel lblRecCount;
    javax.swing.JLabel lblSlash;
    javax.swing.JLabel lblZoznam;
    javax.swing.ButtonGroup menoButtonGroup;
    javax.swing.JRadioButton rbPoslRevMeno;
    javax.swing.JRadioButton rbPovodPublMeno;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxAutorPublikacie;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxAutorZberu;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxCasopis;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxCelad;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxDruh;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxEndemizmus;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxFTGokres;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxHerbar;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxKvadrant;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxObec;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxOhrozenost;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxPovodnost;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxRod;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxRok;
    sk.sav.bot.dataflos.gui.ResizeableComboBox rcbxStat;
    javax.swing.JTable recordsOverviewTable;
    javax.swing.JScrollPane spFilteredRecordsOverview;
    javax.swing.JTextField txtActualPage;
    javax.swing.JTextField txtCiarKod;
    javax.swing.JTextField txtCisloPolozky;
    javax.swing.JTextField txtIDudaj;
    javax.swing.JTextField txtPagesCount;
    javax.swing.JTextField txtRecNumberToShow;
    javax.swing.JTextField txtTaxonMatch;
    // End of variables declaration//GEN-END:variables

    public javax.swing.JTable getRecordsOverviewTable() {
        return recordsOverviewTable;
    }

    public void setRecordsOverviewTable(javax.swing.JTable recordsOverviewTable) {
        this.recordsOverviewTable = recordsOverviewTable;
    }

    public javax.swing.JCheckBox getCbMyOwnRecords() {
        return cbMyOwnRecords;
    }

    public void setCbMyOwnRecords(javax.swing.JCheckBox cbMyOwnRecords) {
        this.cbMyOwnRecords = cbMyOwnRecords;
    }

    public javax.swing.JLabel getLblRecCount() {
        return lblRecCount;
    }

    public void setLblRecCount(javax.swing.JLabel lblRecCount) {
        this.lblRecCount = lblRecCount;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxAutor() {
        return rcbxAutorZberu;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxAutorPublikacie() {
        return rcbxAutorPublikacie;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxCasopis() {
        return rcbxCasopis;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxCelad() {
        return rcbxCelad;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxDruh() {
        return rcbxDruh;
    }
    
    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxOhrozenost() {
        return rcbxOhrozenost;
    }
    
    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxEndemizmus() {
        return rcbxEndemizmus;
    }
    
    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxPovodnost() {
        return rcbxPovodnost;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxFTGokres() {
        return rcbxFTGokres;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxHerbar() {
        return rcbxHerbar;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxKvadrant() {
        return rcbxKvadrant;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxObec() {
        return rcbxObec;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxRod() {
        return rcbxRod;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxRok() {
        return rcbxRok;
    }

    public sk.sav.bot.dataflos.gui.ResizeableComboBox getRcbxStat() {
        return rcbxStat;
    }

    public String getTaxonMatch() {
        return txtTaxonMatch.getText();
    }

    public void deselectCriteria() {
        
        rcbxDruh.setSelectedIndex(0);
        rcbxRod.setSelectedIndex(0);
        rcbxCelad.setSelectedIndex(0);
        rcbxAutorZberu.setSelectedIndex(0);
        rcbxStat.setSelectedIndex(0);
        rcbxFTGokres.setSelectedIndex(0);
        rcbxObec.setSelectedIndex(0);
        rcbxKvadrant.setSelectedIndex(0);
        rcbxAutorPublikacie.setSelectedIndex(0);
        rcbxCasopis.setSelectedIndex(0);
        rcbxRok.setSelectedIndex(0);
        rcbxHerbar.setSelectedIndex(0);
        
        txtTaxonMatch.setText("");
        txtIDudaj.setText("");
        txtCisloPolozky.setText("");
        txtCiarKod.setText("");
        
        rbPoslRevMeno.setSelected(true);
        txtRecNumberToShow.setText("");
    }

    public void loadFiltersAndData(String callSource) {
        this.callSource = callSource;
        loadingDialog = new LoadingDialog("Načítavanie dát z databázy", "Načítavam...", 0, 100, FilterRecordsOverview.this);
        recordsLoadingTask = new RecordsAndFiltersLoadingTask();
        //task.addPropertyChangeListener(MainFrame.this);
        loadingDialog.setAlwaysOnTop(true);
        loadingDialog.addWindowListener(new LoadingClosedListener());
        recordsLoadingTask.execute();
    }
    
    // akcia spustajuca filtrovanie dat
    private class DoFilterAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            loadingDialog = new LoadingDialog("Filtrovanie dát z tabuľky", "Vyhľadávam...", 0, 100, FilterRecordsOverview.this);
            loadingDialog.addWindowListener(new FilteringClosedListener());
            loadingDialog.getProgressBar().setIndeterminate(true);
            filterTask = new FilterTask();
            filterTask.execute();
        }
    }
    
    // akcia ktora nuluje akekolvek nastavene filtre a nastavuje do tabulky vsetky data
    private class ClearFilterAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            deselectCriteria();
            model.setData(container);
            setPagingElements();
        }
    }
    
    // akcia ktora nanovo nacita data do tabulky (nacitat aj filtre? nateraz nie)
    private class ActualizeDataAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            
            loadingDialog = new LoadingDialog("Aktualizovanie údajov", "Načítavam...", 0, 100, FilterRecordsOverview.this);
            loadingDialog.getProgressBar().setIndeterminate(true);

            RecordsOnlyLoadingTask lra = new RecordsOnlyLoadingTask();
            lra.execute();
        }
    }
    

    public void setTableModel(List<Udaj> udajAll) {
        
        container = udajAll;
        model = new RecordsInsertedModel();
        model.setData(udajAll);
        recordsOverviewTable.setModel(model);
        
        // pokus o sfunkcnenie triedenia na vsetkych strankach tabulky
//        final RowFilter<RecordsInsertedModel, Integer> filter = new RowFilter<RecordsInsertedModel, Integer>();
//        {
//            @Override
//            public boolean include(RowFilter.Entry<? extends RecordsInsertedModel, ? extends Integer> entry) {
//                RecordsInsertedModel rim = (RecordsInsertedModel) recordsOverviewTable.getModel();
//                int vidx = recordsOverviewTable.convertRowIndexToView(entry.getIdentifier());
//                return vidx < rim.getPageSize();
//            }
//        };
        final TableRowSorter<RecordsInsertedModel> sorter = new TableRowSorter<RecordsInsertedModel>(model) {
            @Override
            public void toggleSortOrder(int column) {
                RowFilter<? super RecordsInsertedModel, ? super Integer> f = getRowFilter();
                setRowFilter(null);
                super.toggleSortOrder(column);
                setRowFilter(f);
            }
        };
        
//        sorter.setRowFilter(filter);
        recordsOverviewTable.setRowSorter(sorter);

        setPagingElements();
        recordsOverviewTable.getColumnModel().getColumn(1).setMinWidth(BARCODE_WIDTH);
    }
    
    public void setPagingElements() {
        RecordsInsertedModel tblModel = (RecordsInsertedModel) getRecordsOverviewTable().getModel();
        int pagesCount = tblModel.getPageCount();
        if (pagesCount > 0){
            if (pagesCount > tblModel.getPageOffset()){
                txtActualPage.setText(String.valueOf(tblModel.getPageOffset() + 1));
            } else {
                tblModel.goToPage(0);
                txtActualPage.setText(String.valueOf(1));
            }
        } else {
            txtActualPage.setText(String.valueOf(0));
        }
        txtPagesCount.setText(String.valueOf(pagesCount));
        if (tblModel.getPageOffset() > 0) {
            btnRecordsPrevPage.setEnabled(true);
        } else {
            btnRecordsPrevPage.setEnabled(false);
        }
        if (pagesCount > 1 && tblModel.getPageOffset() < pagesCount-1) {
            btnRecordsNextPage.setEnabled(true);
        } else {
            btnRecordsNextPage.setEnabled(false);
        }
        lblRecCount.setText("Počet nájdených údajov: " + Integer.toString(model.getRealRowCount()));
    }

    public void setHq(HibernateQuery hq) {
        this.hq = hq;
    }

    private class FilteringClosedListener implements WindowListener {

        @Override
        public void windowClosing(WindowEvent e) {
            Object[] options = {"Áno", "Nie"};
            if (JOptionPane.showOptionDialog(loadingDialog, 
                "Naozaj zrušiť filtrovanie údajov?", "Naozaj zrušiť?", 
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE, null, options, options[1]) == JOptionPane.YES_OPTION){
                
                log.info("Filtering of udajs cancelled.");
                loadingDialog.setVisible(false);
                filterTask.cancel(true);
                model.setData(container);
                setPagingElements();
            }
        }

        @Override
        public void windowOpened(WindowEvent e) {
        }

        @Override
        public void windowClosed(WindowEvent e) {
        }

        @Override
        public void windowIconified(WindowEvent e) {
        }

        @Override
        public void windowDeiconified(WindowEvent e) {
        }

        @Override
        public void windowActivated(WindowEvent e) {
        }

        @Override
        public void windowDeactivated(WindowEvent e) {
        }
    }
    
    class FilterTask extends SwingWorker<Void, Integer> {
    /*
     * Main task. Executed in background thread.
     */
        RecordsInsertedModel rim = (RecordsInsertedModel)recordsOverviewTable.getModel();
        int modelPageSize = rim.getPageSize();
        
        @Override
        public Void doInBackground() {
            
            ListOfSpecies los = (ListOfSpecies) rcbxDruh.getSelectedItem();
            Genus genus = (Genus) rcbxRod.getSelectedItem();
            FamilyApg familyAPG = (FamilyApg) rcbxCelad.getSelectedItem();
            String taxonMatch = (String) txtTaxonMatch.getText();
            boolean poslRevMeno = rbPoslRevMeno.isSelected();
            boolean taxonOchrana = cbTaxonOchrana.isSelected();
            TaxonOhrozenost taxonOhrozenost = (TaxonOhrozenost) rcbxOhrozenost.getSelectedItem();
            TaxonEndemizmus taxonEndemizmus = (TaxonEndemizmus) rcbxEndemizmus.getSelectedItem();
            TaxonPovodnost taxonPovodnost = (TaxonPovodnost) rcbxPovodnost.getSelectedItem();
            MenaZberRev autorZberu = (MenaZberRev) rcbxAutorZberu.getSelectedItem();
            Brumit4 stat = (Brumit4) rcbxStat.getSelectedItem();
            Ftgokres ftg = (Ftgokres) rcbxFTGokres.getSelectedItem();
            Obec obec = (Obec) rcbxObec.getSelectedItem();
            Kvadrant kvadrant = (Kvadrant) rcbxKvadrant.getSelectedItem();
            MenaZberRev autorPublikacie = (MenaZberRev) rcbxAutorPublikacie.getSelectedItem();
            Casopisy casopis = (Casopisy) rcbxCasopis.getSelectedItem();
            String rok = (String) rcbxRok.getSelectedItem();
            Herbar herbar = (Herbar) rcbxHerbar.getSelectedItem();
            String idUdaj = (String) txtIDudaj.getText();
            String cisloPolozky = (String) txtCisloPolozky.getText();
            String ciarKod = (String) txtCiarKod.getText();
            
            String recNumber = txtRecNumberToShow.getText();

            model.setEmpty();
            model.fireTableDataChanged();
            
            // ak je zadane cislo, maju sa vyfiltrovat vsetky udaje, alebo iba niekolko poslednych? (cisla vacsie ako velkost kontajneru, zaokruhlime na jeho velkost)
            recNumber = (!recNumber.equals("")) ? String.valueOf(Math.min(Integer.parseInt(recNumber), container.size())) : "";
            
            //ak nebolo zadane ziadne z kriterii..
            if (los == null && genus == null && familyAPG == null && taxonMatch.isEmpty() && !taxonOchrana && taxonOhrozenost == null && taxonEndemizmus == null && taxonPovodnost == null && autorZberu == null && stat == null && ftg == null && obec == null && kvadrant == null && autorPublikacie == null && casopis == null && rok == null && herbar == null && idUdaj.isEmpty() && cisloPolozky.isEmpty() && ciarKod.isEmpty()){ 
                
                int recCountToShow = (!recNumber.equals("")) ? Integer.parseInt(recNumber) : container.size();
                // .. ak recNumberTxt nevyplnene, alebo rovne(resp. prevysujuce) pocet udajov
                if (recCountToShow == container.size()){
                    for (Udaj udaj : container) {
                        model.addRow(udaj);
                    }
                } else { // v opacnom pripade, pokial sa ma vyfiltrovat iba niekolko poslednych, obratime zoznam udajov a zobrazime xy od konca
                    List<Udaj> reverseUdajs = new ArrayList(container);
                    Collections.reverse(reverseUdajs);
                    for (int i = 0; i < recCountToShow; i++){
                        model.addRow(reverseUdajs.get(i));
                    }
                }
                setPagingElements();
                model.fireTableDataChanged();
                publish(100);
                
            } else {

                List<Udaj> udajs = hq.filterByCriteria(idUdaj, cisloPolozky, ciarKod, herbar, autorZberu, stat, ftg, obec, kvadrant, rok, casopis, autorPublikacie, los, taxonMatch, genus, familyAPG, recNumber, poslRevMeno, taxonOchrana, taxonOhrozenost, taxonEndemizmus, taxonPovodnost, cbMyOwnRecords.isSelected());
                
                for (Udaj udaj : udajs){
                    model.addRow(udaj);
                }
                model.fireTableDataChanged();
                if (model.getData().size() > modelPageSize && model.getData().size() % modelPageSize == 1){
                    txtPagesCount.setText(String.valueOf((int) model.getData().size() / 100 + 1));
                }
                setPagingElements();
            }
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
            loadingDialog.setVisible(false);
        }
    }
    
    private class PreviousFilterPageAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            RecordsInsertedModel tblModel = (RecordsInsertedModel) getRecordsOverviewTable().getModel();
            tblModel.pageDown();
            txtActualPage.setText(String.valueOf(tblModel.getPageOffset() + 1));

            btnRecordsNextPage.setEnabled(true);

            if (tblModel.getPageOffset() == 0) {
                btnRecordsPrevPage.setEnabled(false);
            } else {
                btnRecordsPrevPage.setEnabled(true);
            }
        }
    }

    private class NextFilterPageAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            RecordsInsertedModel tblModel = (RecordsInsertedModel) getRecordsOverviewTable().getModel();
            tblModel.pageUp();
            txtActualPage.setText(String.valueOf(tblModel.getPageOffset() + 1));

            btnRecordsPrevPage.setEnabled(true);

            if (tblModel.getPageOffset() == tblModel.getPageCount() - 1) {
                btnRecordsNextPage.setEnabled(false);
            } else {
                btnRecordsNextPage.setEnabled(true);
            }
        }
    }
    
    // vlakno, majuce na starosti nacitanie filtrov a udajov z databazy a popri tom zobrazovat percentualnu informaciu o stave ulohy
    class RecordsAndFiltersLoadingTask extends SwingWorker<Void, Integer> {

        @Override
        public Void doInBackground() {
            
            List<Entity> listLos;
            List<Entity> listGenus;
            List<Entity> listFamily;
            List<Entity> listPochybnost;
            List<Entity> listOhrozenost;
            List<Entity> listEndemizmus;
            List<Entity> listPovodnost;
            List<Entity> listBrummit4;
            List<Entity> listFtgOkres;
            List<Entity> listObec;
            List<Entity> listKvadrant;
            List<Entity> listAutor;
            List<Entity> listHerb;
            List<Entity> listCasopis;
            
            // docasne vypneme moznost prepinania medzi vsetkymi a vlastnymi udajmi, nech to nesposobi kolizie
            getCbMyOwnRecords().setEnabled(false);
            
            // nacitavanie jednotlivych koloniek do filtra
            
            listLos = hq.getAllRecords("ListOfSpecies", "meno");
            listLos.add(0, null);
            getRcbxDruh().setModel(new DefaultComboBoxModel(listLos.toArray()));
            publish(12);
            
            // jeden z "checkpointov" ak by sa chcelo z nacitavania udajov vyskocit
            if (this.isCancelled()) return null;
            
            listGenus = hq.getAllRecords("Genus", "meno");
            listGenus.add(0, null);
            getRcbxRod().setModel(new DefaultComboBoxModel(listGenus.toArray()));
            publish(5);
            
            listFamily = hq.getAllRecords("FamilyApg", "meno");
            listFamily.add(0, null);
            getRcbxCelad().setModel(new DefaultComboBoxModel(listFamily.toArray()));
            publish(2);
            
            // jeden z "checkpointov" ak by sa chcelo z nacitavania udajov vyskocit
            if (this.isCancelled()) return null;
            
            listOhrozenost = hq.getAllRecords("TaxonOhrozenost", "skratka");
            listOhrozenost.add(0, null);
            getRcbxOhrozenost().setModel(new DefaultComboBoxModel(listOhrozenost.toArray()));
            publish(1);
            
            listEndemizmus = hq.getAllRecords("TaxonEndemizmus", "skratka");
            listEndemizmus.add(0, null);
            getRcbxEndemizmus().setModel(new DefaultComboBoxModel(listEndemizmus.toArray()));
            publish(1);
            
            listPovodnost = hq.getAllRecords("TaxonPovodnost", "skratka");
            listPovodnost.add(0, null);
            getRcbxPovodnost().setModel(new DefaultComboBoxModel(listPovodnost.toArray()));
            publish(1);
            
            // jeden z "checkpointov" ak by sa chcelo z nacitavania udajov vyskocit
            if (this.isCancelled()) return null;

            listAutor = hq.getAllRecords("MenaZberRev", "meno");
            listAutor.add(0, null);
            getRcbxAutor().setModel(new DefaultComboBoxModel(listAutor.toArray()));
            publish(1);

            listBrummit4 = hq.getAllRecords("Brumit4", "meno");
            listBrummit4.add(0, null);
            getRcbxStat().setModel(new DefaultComboBoxModel(listBrummit4.toArray()));
            publish(2);

            listFtgOkres = hq.getAllRecords("Ftgokres", "meno");
            listFtgOkres.add(0, null);
            getRcbxFTGokres().setModel(new DefaultComboBoxModel(listFtgOkres.toArray()));
            publish(1);
            
            listObec = hq.getAllRecords("Obec", "meno");
            listObec.add(0, null);
            getRcbxObec().setModel(new DefaultComboBoxModel(listObec.toArray()));
            publish(1);
            
            listKvadrant = hq.getAllRecords("Kvadrant", "meno");
            listKvadrant.add(0, null);
            getRcbxKvadrant().setModel(new DefaultComboBoxModel(listKvadrant.toArray()));
            publish(3);
            
            if (this.isCancelled()) return null;
            
            getRcbxAutorPublikacie().setModel(new DefaultComboBoxModel(listAutor.toArray()));
            
            listCasopis = hq.getAllRecords("Casopisy", "meno");
            listCasopis.add(0, null);
            getRcbxCasopis().setModel(new DefaultComboBoxModel(listCasopis.toArray()));
            publish(1);

            List<String> years = hq.getDataFromTableColumn("LitZdroj", "rok");
            years.removeAll(Arrays.asList("", null)); // odstranime prazdny element
            years.add(0, null);
            getRcbxRok().setModel(new DefaultComboBoxModel(years.toArray()));
            publish(2);

            listHerb = hq.getAllRecords("Herbar", "skratkaHerb");
            listHerb.add(0, null);
            getRcbxHerbar().setModel(new DefaultComboBoxModel(listHerb.toArray()));
            publish(1);
            
            if (this.isCancelled()) return null;

            // nacitame vsetky alebo len vlastne udaje?
            if (getCbMyOwnRecords().isSelected()){
                setTableModel((hq.getUdajInsertedBy()));
            } else {
                setTableModel(hq.getUdajAll());
            }
            
            // nastavenie informacii pre strankovanie tabulky
            setPagingElements();

            // nastavime sirky jednotlivych stlpcov
            TableColumnsWidthCounter.setWidthOfColumns(getRecordsOverviewTable());

            // prednastavime aby filter bol na zaciatku prazdny
            deselectCriteria();
            
            publish(66);
            
            // po dobenuti nacitania udajov opat obnovime moznost volby vsetkych/vlastnych udajov
            getCbMyOwnRecords().setEnabled(true);
            
            return null;
        }

        @Override
        public void done() {}

        @Override
        protected void process(List<Integer> pieces) {
            for (Integer percent : pieces ) {
                // pripocitaj a nastav percenta z uz ukoncenych ciastkovych uloh
                loadingDialog.getProgressBar().setValue(loadingDialog.getProgressBar().getValue() + percent);
                String note = String.format("Dokončených %d%%.\n", loadingDialog.getProgressBar().getValue());
                loadingDialog.setNote(note);
                
                // po 35% zmen popis na loadingDialogu, ze sa aktualne nacitava tabulka a po 100% tento dialog zatvor
                if (loadingDialog.getProgress() == 34){
                    loadingDialog.setLoadingTitle("Načítavanie tabuľky");
                } else if (loadingDialog.getProgress() == 100) {
                    loadingDialog.setVisible(false);
                }
            }
        }
    }
    
    // listener na moznost zavretia nacitavacieho dialogu (a tym zrusenie dalsieho nacitavania) s nutnostou potvrdenia tejto volby
    private class LoadingClosedListener implements WindowListener {

        @Override
        public void windowClosing(WindowEvent e) {
            Object[] options = {"Áno", "Nie"};
            if (JOptionPane.showOptionDialog(loadingDialog, 
                "Naozaj zrušiť načítanie údajov?", "Naozaj zrušiť?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE, null, options, options[1]) == JOptionPane.YES_OPTION){
                
                log.info("Loading of filters cancelled.");
                loadingDialog.setVisible(false);
                JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(FilterRecordsOverview.this);
                if (parentFrame instanceof MainFrame){
                    MainFrame frame = (MainFrame) parentFrame;
                    frame.hideRecordsOverviewTab();
                } else if (parentFrame instanceof ExportDataForm){
                    parentFrame.setVisible(false);
                }
                recordsLoadingTask.cancel(true);
            }
        }

        @Override
        public void windowOpened(WindowEvent e) {}

        @Override
        public void windowClosed(WindowEvent e) {}

        @Override
        public void windowIconified(WindowEvent e) {}

        @Override
        public void windowDeiconified(WindowEvent e) {}

        @Override
        public void windowActivated(WindowEvent e) {}

        @Override
        public void windowDeactivated(WindowEvent e) {}
    }
    
    
    // vlakno, ktore nacitava udajov pre tabulku prehladu udajov (vyuziva sa pri aktualizacii alebo zmenu typu vlastne/vsetky)
    class RecordsOnlyLoadingTask extends SwingWorker<Void, Integer> {

        List<Udaj> udajs = null;

        @Override
        public Void doInBackground() {
         
            if (getCbMyOwnRecords().isSelected()){
                udajs = hq.getUdajInsertedBy();
            } else {
                udajs = hq.getUdajAll();
            }
            
            return null;
        }
        
        @Override
        public void done() {
            
            setTableModel(udajs);
            TableColumnsWidthCounter.setWidthOfColumns(getRecordsOverviewTable());
            loadingDialog.setVisible(false);   
        }
    
        @Override
        protected void process(final List<Integer> pieces) {}
    }
}