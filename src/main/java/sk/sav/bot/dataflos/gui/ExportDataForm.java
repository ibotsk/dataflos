package sk.sav.bot.dataflos.gui;

import sk.sav.bot.dataflos.entity.Ftgokres;
import sk.sav.bot.dataflos.entity.LitZdroj;
import sk.sav.bot.dataflos.entity.LitZdrojRev;
import sk.sav.bot.dataflos.entity.Lokality;
import sk.sav.bot.dataflos.entity.LokalityFtgokresAsoc;
import sk.sav.bot.dataflos.entity.LokalityKvadrantAsoc;
import sk.sav.bot.dataflos.entity.LzdrojAutoriAsoc;
import sk.sav.bot.dataflos.entity.LzdrojEditoriAsoc;
import sk.sav.bot.dataflos.entity.SkupRev;
import sk.sav.bot.dataflos.entity.SkupRevDet;
import sk.sav.bot.dataflos.entity.Udaj;
import sk.sav.bot.dataflos.entity.UdajZberAsoc;
import sk.sav.bot.dataflos.models.RecordsInsertedModel;
import sk.sav.bot.dataflos.util.ComparatorFTG;
import sk.sav.bot.dataflos.util.HandyUtils;
import sk.sav.bot.dataflos.util.HibernateQuery;
import sk.sav.bot.dataflos.util.TableColumnsWidthCounter;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.RichTextString;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTPPr;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTSpacing;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.STLineSpacingRule;
   
/**
 *
 * @author Jakub
 */
public class ExportDataForm extends javax.swing.JFrame {
    
    String excelExport;
    String wordFloraExport;
    String wordSchedaExport;
    HibernateQuery hq;
        
    public LoadingDialog loadingDialog;
    private WritingExportTask writingExportTask;
    
    private static Logger log = Logger.getLogger(ExportDataForm.class);
    
    public ExportDataForm(HibernateQuery hq) {
        
        this.hq = hq;
        
        initComponents();
        
        DateFormat df = new SimpleDateFormat("yyyyMMdd");
        Date today = Calendar.getInstance().getTime();
        String reportDate = df.format(today);
        
        //defaultne nazvy pre exportovane subory
        excelExport = "DATAflosExport_"+reportDate+".xls";
        wordFloraExport = "DATAflosExportFlora_"+reportDate+".docx";
        wordSchedaExport = "DATAflosExportScheda_"+reportDate+".xls";
        
        String defaultFileName = "";
        if (rbExportExcel.isSelected()){
            defaultFileName = excelExport;
        } else if (rbExportWordFlora.isSelected()) {
            defaultFileName = wordFloraExport;
        } else if (rbExportWordScheda.isSelected()){
            defaultFileName = wordSchedaExport;
        }
        
        txtExportDirPath.setText(System.getProperty("user.dir")+"\\"+defaultFileName);
        
        filterRecordsExportOverview.setHq(hq);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vyberExportu = new javax.swing.ButtonGroup();
        rbExportExcel = new javax.swing.JRadioButton();
        rbExportWordFlora = new javax.swing.JRadioButton();
        rbExportWordScheda = new javax.swing.JRadioButton();
        btnDoExport = new javax.swing.JButton();
        txtExportDirPath = new javax.swing.JTextField();
        btnExportChangeDir = new javax.swing.JButton();
        btnCancelExport = new javax.swing.JButton();
        lblExportFormat = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        filterRecordsExportOverview = new sk.sav.bot.dataflos.gui.FilterRecordsOverview();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Export údajov");

        vyberExportu.add(rbExportExcel);
        rbExportExcel.setSelected(true);
        rbExportExcel.setText("do Excelu");
        rbExportExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbExportExcelMouseClicked(evt);
            }
        });

        vyberExportu.add(rbExportWordFlora);
        rbExportWordFlora.setText("pre potreby Flóry Slovenska");
        rbExportWordFlora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbExportWordFloraMouseClicked(evt);
            }
        });

        vyberExportu.add(rbExportWordScheda);
        rbExportWordScheda.setText("na schedu");
        rbExportWordScheda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rbExportWordSchedaMouseClicked(evt);
            }
        });

        btnDoExport.setText("Exportovať");
        btnDoExport.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnDoExportMouseClicked(evt);
            }
        });

        txtExportDirPath.setText(System.getProperty("user.dir"));

        btnExportChangeDir.setText("Zmeň adresár");
        btnExportChangeDir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnExportChangeDirMouseClicked(evt);
            }
        });

        btnCancelExport.setAction(new BtnCloseAction());
        btnCancelExport.setText("Zavrieť");

        lblExportFormat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblExportFormat.setText("Spôsob exportu:");

        jScrollPane10.setViewportView(filterRecordsExportOverview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(333, 333, 333)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblExportFormat)
                                .addGap(43, 43, 43)
                                .addComponent(rbExportExcel)
                                .addGap(51, 51, 51)
                                .addComponent(rbExportWordFlora)
                                .addGap(49, 49, 49)
                                .addComponent(rbExportWordScheda))
                            .addComponent(txtExportDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnExportChangeDir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1147, Short.MAX_VALUE)
                        .addComponent(btnDoExport)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancelExport))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 2313, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbExportExcel)
                    .addComponent(rbExportWordFlora)
                    .addComponent(rbExportWordScheda)
                    .addComponent(lblExportFormat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDoExport)
                        .addComponent(btnCancelExport))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtExportDirPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExportChangeDir)))
                .addGap(11, 11, 11))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnDoExportMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDoExportMouseClicked
        
        log.info("Export to be done.");
        if (!((RecordsInsertedModel)filterRecordsExportOverview.getRecordsOverviewTable().getModel()).getData().isEmpty()){
            loadingDialog = new LoadingDialog("Prebieha export dát do súboru", "Zapisujem dáta...", 0, 100, this);
            loadingDialog.getProgressBar().setIndeterminate(true);
            writingExportTask = new WritingExportTask();
            writingExportTask.execute();
        } else {
            log.info("No export data.");
            JOptionPane.showMessageDialog(this.loadingDialog, "Žiadne údaje k exportovaniu.");
        }
        
    }//GEN-LAST:event_btnDoExportMouseClicked

    public void writeToExcelFile(String path, List<Udaj> udaje) throws FileNotFoundException, IOException {
       
        log.info("Exporting datas to excel file: "+path);
        //subor je po vygenerovani iba v read-only forme
        HSSFWorkbook workbookWrite;
        InputStream is = null;
        FileOutputStream fileWrite = null;
        
        try {
            is = this.getClass().getResourceAsStream("/excelTemplate.xls"); 

            workbookWrite = new HSSFWorkbook(is);
            HSSFSheet sheetWriteL = workbookWrite.getSheet("Literárne_údaje");
            HSSFSheet sheetWriteH = workbookWrite.getSheet("Herbárové_položky");
            HSSFSheet sheetWriteT = workbookWrite.getSheet("Terénne_údaje");

            //na kazdej zo zaloziek sa zacina zapisovat do riadku c. 3 (predchadzajuce tvoria hlavicku)
            int lastLitRow = 3;
            int lastHerbRow = 3;
            int lastTerenRow = 3;

            //zapisuj udaje, najprv vsetky literarne udaje, potom herbarove a napokon terenne
            for (Udaj udaj : udaje){
                if (udaj.getTyp() == 'L'){
                    lastLitRow = writeExcelNewLitUdaj(sheetWriteL, lastLitRow, udaj);
                } else if (udaj.getTyp() == 'H'){
                    lastHerbRow = writeExcelNewHerbUdaj(sheetWriteH, lastHerbRow, udaj);
                } else if (udaj.getTyp() == 'T'){
                    lastTerenRow = writeExcelNewTerenUdaj(sheetWriteT, lastTerenRow, udaj);
                }
            }

            //vytvor subor a zapis ho do suboroveho systemu
            fileWrite = new FileOutputStream(path);
            workbookWrite.write(fileWrite);

        } finally {
            fileWrite.close();
            is.close();
        }
    }
    
    public void writeToScheda(String path, List<Udaj> udaje) throws FileNotFoundException, IOException, InvalidFormatException {
        
        log.info("Exporting datas to scheda format: "+path);
        
        InputStream is = null;
        FileOutputStream fileWrite = null;
        int udajNumber = 0;

        try {

            is = this.getClass().getResourceAsStream("/schedaTemplate.xls"); 
            HSSFWorkbook workbookWrite = new HSSFWorkbook(is);
            HSSFSheet schedaSheet = null;

            // pocet stran so schedami ( = na jednu stranu sa vojde 6 sched)
            int schedaPages = (udaje.size()-1) / 6 + 1;

            // nakopiruj prazdne strany so schedami na vsetky potrebne zalozky
            for (int page = 2; page <= schedaPages; page++){
            	workbookWrite.cloneSheet(0);
            }

            for (Udaj udaj : udaje){
            	
            	// pri kazdom 6. udaji nastav dalsiu zalozku
            	if (((udajNumber) % 6 == 0)){
                    schedaSheet = workbookWrite.getSheetAt(udajNumber / 6);
                }

                writeUdajToScheda(udaj, udajNumber, schedaSheet);

                udajNumber++;
            }

            //vytvor subor a zapis ho do suboroveho systemu
            fileWrite = new FileOutputStream(path);
            workbookWrite.write(fileWrite);

        } finally {
            fileWrite.close();
            is.close();
        }
    }
    
    public void writeToFlora(String path, List<Udaj> udaje) throws FileNotFoundException, IOException, InvalidFormatException {
        
        log.info("Exporting datas to flora format: "+path);
        
        FileOutputStream fileWrite;
        
        XWPFDocument document = new XWPFDocument(this.getClass().getResourceAsStream("/floraTemplate.docx"));
                
        //ak by bolo v exporte udajov  viac druhov, roztriedime ich zvlast do zoznamov udajov
        List<String> losNames = new ArrayList(); // mena vsetkych druhov
        List<List<Udaj>> llu = new ArrayList(new ArrayList<Udaj>()); //zoznamy udajov pre kazde rozlicne meno druhu
        int currentListNumber = 0;
        for (Udaj udajInit : udaje){

            SkupRev urcenie;    
            // existuje k udaju nejaka revizia?
            SortedSet<SkupRev> skupRevs = new TreeSet<>(udajInit.getRevisions());
            if (!skupRevs.isEmpty() && skupRevs.last() != null) {
                // pokial ano, budeme pracovat s tymto urcenim        
                urcenie = skupRevs.last();
            } else {
                // pokial nie, budeme brat do uvahy povodne urcenie
                urcenie = udajInit.getUrcenie();
            }

            String los = ((urcenie == null || urcenie.getMenaTaxonov() == null || urcenie.getMenaTaxonov().getListOfSpecies() == null) ? "" : urcenie.getMenaTaxonov().getListOfSpecies().getMeno());
            // ak dane meno este doteraz nebolo evidovane, zarad ho do zoznamu mien a vytvor prenho novy zoznam udajov
            if (!losNames.contains(los)){
                losNames.add(los);
                llu.add(new ArrayList<Udaj>());
            }
            //zarad udaj do prislusneho zoznamu
            int index = losNames.indexOf(los);
            List<Udaj> udajList = llu.get(index);
            udajList.add(udajInit);

        }
                
        // pre kazdy zo zoznamov udajov konkretneho druhu, urob nasledovne:
        for (List<Udaj> udajeList : llu){

            // zotried druh podla ftg okresov a vramci nich podla kvadrantov
            Collections.sort(udajeList, new ComparatorFTG());

            // novy odsek pre druh
            XWPFParagraph losParagraph = document.createParagraph();
            losParagraph.setAlignment(ParagraphAlignment.LEFT);
            setSimpleLineSpacing(losParagraph, 0, 0);

            try {

                // pred odsekom zobraz nazov druhu
                XWPFRun rhLOSHeader = losParagraph.createRun();
                rhLOSHeader.setBold(true);
                rhLOSHeader.setFontFamily("Times New Roman");
                rhLOSHeader.setFontSize(12);
                rhLOSHeader.addBreak();
                rhLOSHeader.setText(losNames.get(currentListNumber));
                rhLOSHeader.addBreak();
                rhLOSHeader.addBreak(); 

                Ftgokres lastUdajFTG = null;
                boolean firstNullFtg = true;
                boolean firstNullKvadrantInFtg = true;

                for (Udaj udaj : udajeList){

                    XWPFRun rhUdajLokalita = losParagraph.createRun();
                    rhUdajLokalita.setBold(true);
                    rhUdajLokalita.setFontFamily("Times New Roman");
                    rhUdajLokalita.setFontSize(12);

                    if (udaj.getLokality() != null){

                        Ftgokres newFtgOkres;
                        // pred prvym udajom z noveho ftg okresu (zistujeme podla rovnosti s "najmensim" evidovanym ftgokresom) vypisat cislo tohto ftg okresu
                        if (!udaj.getLokality().getLokalityFtgokresAsocs().isEmpty() && (newFtgOkres = ComparatorFTG.getSmallestFtgokres(udaj.getLokality().getLokalityFtgokresAsocs())) != lastUdajFTG){
                            lastUdajFTG = newFtgOkres;
                            rhUdajLokalita.setText(newFtgOkres.getCislo() + ". ");
                            firstNullKvadrantInFtg = true;
                        } // pred udajmi bez zadaneho ftgokresu vypisat o tomto informaciu
                        else if (udaj.getLokality().getLokalityFtgokresAsocs().isEmpty() && firstNullFtg){
                            firstNullFtg = false;
                            rhUdajLokalita.setText("Všeobecné údaje: ");
                        } // v ostatnych pripadoch oddelit udaje pomlckou
                        else if (udajeList.indexOf(udaj) != 0){
                            rhUdajLokalita.setBold(false);
                            // speci vyziadana pomlcka (ani kratka, ani dlha)
                            rhUdajLokalita.setText("\u2013 ");

                        }

                        // pred udajmi, ktore nemaju zadane informacie o kvadrante vypisat o tom informaciu
                        if (udaj.getLokality().getLokalityKvadrantAsocs().isEmpty() && firstNullKvadrantInFtg){
                            XWPFRun rhMissingKvad = losParagraph.createRun();
                            rhMissingKvad.setBold(false);
                            rhMissingKvad.setFontFamily("Times New Roman");
                            rhMissingKvad.setFontSize(12);
                            firstNullKvadrantInFtg = false;
                            rhMissingKvad.setText("Údaje bez kvadrantu: ");
                        }

                        if (udaj.getTyp() == 'H'){

                            // HERBAROVE UDAJE

                            XWPFRun rhHerb = losParagraph.createRun();
                            rhHerb.setBold(false);
                            rhHerb.setFontFamily("Times New Roman");
                            rhHerb.setFontSize(12);

                            //najblizsia obec
                            if (udaj.getLokality() != null && udaj.getLokality().getObec() != null && udaj.getLokality().getObec().getMeno() != null && !udaj.getLokality().getObec().getMeno().isEmpty()){
                                rhHerb.setText(udaj.getLokality().getObec().getMeno() + ", ");
                            } else {
                                rhHerb.setText("");
                            }

                            //opis lokality
                            if (udaj.getLokality() != null && udaj.getLokality().getOpisLokality() != null && !udaj.getLokality().getOpisLokality().isEmpty()){
                                rhHerb.setText(udaj.getLokality().getOpisLokality() + " (");
                            } else {
                                rhHerb.setText("Opis lokality chýba (");
                            }

                            //autori zberu
                            String zberatelia = "";
                            if (udaj.getUdajZberAsocs() != null){
                                for (Object object : udaj.getUdajZberAsocs()) {
                                    if (object instanceof UdajZberAsoc) {

                                        UdajZberAsoc uza = (UdajZberAsoc) object;
                                        //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                                        zberatelia = zberatelia.concat(uza.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                                    }
                                } 
                            }
                            if (!zberatelia.toString().equals("")){
                                rhHerb.setText(zberatelia.substring(0, zberatelia.length()-2) + " ");
                            } else {
                                rhHerb.setText("s. coll. ");
                            }

                            //rok zberu
                            if (udaj.getDatumZberu() != null && udaj.getDatumZberu().substring(0, 4) != "0000"){
                                rhHerb.setText(udaj.getDatumZberu().substring(0, 4) + " ");
                            } else {
                                rhHerb.setText("s. d. ");
                            }

                            //herbar
                            if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getHerbar() != null && !udaj.getHerbarPolozky().getHerbar().getSkratkaHerb().equals("")){
                                rhHerb.setText(udaj.getHerbarPolozky().getHerbar().getSkratkaHerb() + "). ");
                            } else {
                                rhHerb.setText("Názov herbára chýba). ");
                            }

                        } else if (udaj.getTyp() == 'L'){

                            // LITERARNE UDAJE

                            XWPFRun rhLit = losParagraph.createRun();
                            rhLit.setBold(false);
                            rhLit.setFontFamily("Times New Roman");
                            rhLit.setFontSize(12);

                            //najblizsia obec
                            if (udaj.getLokality() != null && udaj.getLokality().getObec() != null && udaj.getLokality().getObec().getMeno() != null && !udaj.getLokality().getObec().getMeno().isEmpty()){
                                rhLit.setText(udaj.getLokality().getObec().getMeno() + ", ");
                            } else {
                                rhLit.setText("");
                            }

                            //opis lokality
                            if (udaj.getLokality() != null && udaj.getLokality().getOpisLokality() != null && !udaj.getLokality().getOpisLokality().isEmpty()){
                                rhLit.setText(udaj.getLokality().getOpisLokality() + " (");
                            } else {
                                rhLit.setText("Opis lokality chýba (");
                            }

                            //autori zberu
                            String zberatelia = "";
                            if (udaj.getUdajZberAsocs() != null){
                                for (Object object : udaj.getUdajZberAsocs()) {
                                    if (object instanceof UdajZberAsoc) {

                                        UdajZberAsoc uza = (UdajZberAsoc) object;
                                        //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                                        zberatelia = zberatelia.concat(uza.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                                    }
                                } 
                            }
                            if (!zberatelia.toString().equals("")){
                                rhLit.setText(zberatelia.substring(0, zberatelia.length()-2) + " in ");
                            } else {
                                rhLit.setText("s. coll. in ");
                            }

                            //autori / editori publikacie
                            String autoriPublikacie = "";
                            if (udaj.getLitZdroj() != null){
                                if (udaj.getLitZdroj().getLzdrojAutoriAsocs() != null){
                                    for (Object object : udaj.getLitZdroj().getLzdrojAutoriAsocs()) {
                                        if (object instanceof LzdrojAutoriAsoc) {

                                            LzdrojAutoriAsoc lzaa = (LzdrojAutoriAsoc) object;
                                            //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                                            autoriPublikacie = autoriPublikacie.concat(lzaa.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                                        }
                                    }
                                }
                            }
                            if (!autoriPublikacie.equals("")){
                                rhLit.setText(autoriPublikacie.substring(0, autoriPublikacie.length()-2));
                                rhLit.setText(" ");
                            } else {
                                if (udaj.getLitZdroj() != null){
                                    if (udaj.getLitZdroj().getLzdrojEditoriAsocs() != null){
                                        for (Object object : udaj.getLitZdroj().getLzdrojEditoriAsocs()) {
                                            if (object instanceof LzdrojEditoriAsoc) {

                                                LzdrojEditoriAsoc lzaa = (LzdrojEditoriAsoc) object;
                                                //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                                                autoriPublikacie = autoriPublikacie.concat(lzaa.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                                            }
                                        }
                                    }
                                    if (!autoriPublikacie.equals("")){
                                        rhLit.setText(autoriPublikacie.substring(0, autoriPublikacie.length()-2));
                                        rhLit.setText(" ");
                                    }
                                }
                            }

                            //nazov casopisu (knihy / zbornika)
                            if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getCasopis() != null && udaj.getLitZdroj().getCasopis().getMeno() != null){
                                rhLit.setText(udaj.getLitZdroj().getCasopis().getMeno());
                                rhLit.setText(" ");
                            } else if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getNazovKnihy() != null){
                                rhLit.setText(udaj.getLitZdroj().getNazovKnihy());
                                rhLit.setText(" ");
                            }

                            if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getRocnik() != null){
                                rhLit.setText(String.valueOf(udaj.getLitZdroj().getRocnik()) + ": ");
                            }



                            if (udaj.getLitZdroj() != null && udaj.getStranaUdaja() != null){
                                rhLit.setText(String.valueOf(udaj.getStranaUdaja()) + ", ");
                            } else {
                                rhLit.setText("chýba číslo strany, ");
                            }

                            //rok vydania
                            if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getRok() != null){
                                rhLit.setText(String.valueOf(udaj.getLitZdroj().getRok()) + "). ");
                            } else {
                                rhLit.setText("chýba rok vydania). ");
                            }

                        } else if (udaj.getTyp() == 'T'){

                            // NEPUBLIKOVANE UDAJE

                            XWPFRun rhField = losParagraph.createRun();
                            rhField.setBold(false);
                            rhField.setFontFamily("Times New Roman");
                            rhField.setFontSize(12);

                            //najblizsia obec
                            if (udaj.getLokality() != null && udaj.getLokality().getObec() != null && udaj.getLokality().getObec().getMeno() != null && !udaj.getLokality().getObec().getMeno().isEmpty()){
                                rhField.setText(udaj.getLokality().getObec().getMeno() + ", ");
                            } else {
                                rhField.setText("");
                            }

                            //opis lokality
                            if (udaj.getLokality() != null && udaj.getLokality().getOpisLokality() != null && !udaj.getLokality().getOpisLokality().isEmpty()){
                                rhField.setText(udaj.getLokality().getOpisLokality() + " ("); 
                            } else {
                                rhField.setText("Opis lokality chýba (");
                            }

                            //autori zberu
                            String zberatelia = "";
                            if (udaj.getUdajZberAsocs() != null){
                                for (Object object : udaj.getUdajZberAsocs()) {
                                    if (object instanceof UdajZberAsoc) {

                                        UdajZberAsoc uza = (UdajZberAsoc) object;
                                        //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                                        zberatelia = zberatelia.concat(uza.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                                    }
                                } 
                            }
                            if (!zberatelia.toString().equals("")){
                                rhField.setText(zberatelia.substring(0, zberatelia.length()-2) + " ");
                            } else {
                                rhField.setText("s. coll. ");
                            }

                            //rok zberu
                            if (udaj.getDatumZberu() != null && udaj.getDatumZberu().substring(0, 4).equals("0000")){
                                rhField.setText(udaj.getDatumZberu().substring(0, 4) + " not.). ");
                            } else {
                                rhField.setText("s. d. not.). ");
                            }
                        }

                    } else {
                        rhUdajLokalita.setBold(false);
                        // speci vyziadana pomlcka na konci (ani kratka, ani dlha)
                        rhUdajLokalita.setText("chýba popis lokality \u2013 ");
                    }
                }
                currentListNumber++;

            } finally {
                
            }
        }

        fileWrite = new FileOutputStream(path);
        document.write(fileWrite);   
    }
    
    // nastavenie riadkovania na jednoduche
    public void setSimpleLineSpacing(XWPFParagraph par, int after, int before) {
        CTPPr ppr = par.getCTP().getPPr();
        if (ppr == null) ppr = par.getCTP().addNewPPr();
        CTSpacing spacing = ppr.isSetSpacing()? ppr.getSpacing() : ppr.addNewSpacing();
        spacing.setAfter(BigInteger.valueOf(after));
        spacing.setBefore(BigInteger.valueOf(before));
        spacing.setLineRule(STLineSpacingRule.AUTO);
        spacing.setLine(BigInteger.valueOf(240));
    }
    
    
    private void btnExportChangeDirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExportChangeDirMouseClicked
        
        String oldPath = txtExportDirPath.getText();
        
        
        JFileChooser c = new JFileChooser();
        
        c.setSelectedFile(new File(txtExportDirPath.getText()));
      
        // Demonstrate "Save" dialog:
        int rVal = c.showSaveDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            txtExportDirPath.setText(c.getSelectedFile().getAbsolutePath());
        }
        if (rVal == JFileChooser.CANCEL_OPTION) {
            txtExportDirPath.setText(oldPath);
        }
    }//GEN-LAST:event_btnExportChangeDirMouseClicked

    
    //zmena nazvu a cesty k suboru, podla typu exportu
    
    private void rbExportExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbExportExcelMouseClicked
        if (rbExportExcel.isSelected()){
            String defaultFileName = excelExport;
            txtExportDirPath.setText(System.getProperty("user.dir")+"\\"+defaultFileName);
        }
    }//GEN-LAST:event_rbExportExcelMouseClicked

    private void rbExportWordFloraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbExportWordFloraMouseClicked
        if (rbExportWordFlora.isSelected()){
            String defaultFileName = wordFloraExport;
            txtExportDirPath.setText(System.getProperty("user.dir")+"\\"+defaultFileName);
        }
    }//GEN-LAST:event_rbExportWordFloraMouseClicked

    private void rbExportWordSchedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rbExportWordSchedaMouseClicked
        if (rbExportWordScheda.isSelected()){
            String defaultFileName = wordSchedaExport;
            txtExportDirPath.setText(System.getProperty("user.dir")+"\\"+defaultFileName);
        }
    }//GEN-LAST:event_rbExportWordSchedaMouseClicked

    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelExport;
    private javax.swing.JButton btnDoExport;
    private javax.swing.JButton btnExportChangeDir;
    private sk.sav.bot.dataflos.gui.FilterRecordsOverview filterRecordsExportOverview;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JLabel lblExportFormat;
    private javax.swing.JRadioButton rbExportExcel;
    private javax.swing.JRadioButton rbExportWordFlora;
    private javax.swing.JRadioButton rbExportWordScheda;
    private javax.swing.JTextField txtExportDirPath;
    private javax.swing.ButtonGroup vyberExportu;
    // End of variables declaration//GEN-END:variables
       

    // zapis literarneho udaju do excelu - zakladne udaje + udaje o literature + prip. dalsie lit. zdroje 
    private int writeExcelNewLitUdaj(HSSFSheet sheet, int lastRowNumber, Udaj udaj) {

        HSSFRow row = sheet.createRow(lastRowNumber);
        
        exportExcelZakladneUdaje(row, udaj);

        // Herbar
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getHerbar() != null && udaj.getHerbarPolozky().getHerbar().getSkratkaHerb() != null){
            HSSFCell cell = row.createCell(18);
            cell.setCellValue(udaj.getHerbarPolozky().getHerbar().getSkratkaHerb());
        }

        exportExcelLiteratura(row, udaj.getLitZdroj(), 19);

        // Strana s udajom
        if (udaj.getStranaUdaja() != null){
            HSSFCell cell = row.createCell(31);
            cell.setCellValue(udaj.getStranaUdaja());
        }

        // Poznamka k lokalite
        if (udaj.getLokality() != null && udaj.getLokality().getPoznamkaLok() != null){
            HSSFCell cell = row.createCell(32);
            cell.setCellValue(udaj.getLokality().getPoznamkaLok());
        }
        
        // Poznamka k literature
        if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getPoznamka() != null){
            HSSFCell cell = row.createCell(33);
            cell.setCellValue(udaj.getLitZdroj().getPoznamka());
        }
        
        // Pristup k udaju
        HSSFCell cell = row.createCell(34);
        if (udaj.isVerejnePristupny() == true){
            cell.setCellValue("V");
        } else if (udaj.getVerejnePristupnyOd() != null){
            cell.setCellValue(udaj.getVerejnePristupnyOd());
        } else {
            cell.setCellValue("N");
        }
        
        // Revízia údaja v literatúre
        for (Object object : udaj.getLitZdrojRevs()){
            LitZdrojRev lzr = (LitZdrojRev) object;

            if (lzr.getLitZdroj() != null){

                lastRowNumber++;

                HSSFRow rowRevision = sheet.createRow(lastRowNumber);

                LitZdroj lzRev = lzr.getLitZdroj();

                exportExcelLiteratura(rowRevision, lzRev, 23);
            }
        }
        lastRowNumber++;
        return lastRowNumber;
    }

    // zapis herbaroveho udaju do excelu - zakladne udaje + udaje o herbari + revizie herb. polozky
    private int writeExcelNewHerbUdaj(HSSFSheet sheet, int lastRowNumber, Udaj udaj) {
        
        HSSFRow row = sheet.createRow(lastRowNumber);
        
        exportExcelZakladneUdaje(row, udaj);

        // Herbar
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getHerbar() != null && udaj.getHerbarPolozky().getHerbar().getSkratkaHerb() != null){
            HSSFCell cell = row.createCell(18);
            cell.setCellValue(udaj.getHerbarPolozky().getHerbar().getSkratkaHerb());
        }
        
        // Číslo položky
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getCisloPol() != null){
            HSSFCell cell = row.createCell(19);
            cell.setCellValue(udaj.getHerbarPolozky().getCisloPol());
        }
        
        // Exsikát
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getExsikaty() != null && udaj.getHerbarPolozky().getExsikaty().getMeno() != null){
            HSSFCell cell = row.createCell(20);
            cell.setCellValue(udaj.getHerbarPolozky().getExsikaty().getMeno());
        }
        
        // Číslo čiar. kódu
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getCisloCk() != null){
            HSSFCell cell = row.createCell(21);
            cell.setCellValue(udaj.getHerbarPolozky().getCisloCk());
        }
        
        // Číslo zberu
        if (udaj.getHerbarPolozky() != null && udaj.getHerbarPolozky().getCisloZberu() != null){
            HSSFCell cell = row.createCell(22);
            cell.setCellValue(udaj.getHerbarPolozky().getCisloZberu());
        }
        
        // vypis literatury pred reviziami, aby udaje zostali v rovnakom riadku
        exportExcelLiteratura(row, udaj.getLitZdroj(), 28);

        // Strana s udajom
        if (udaj.getStranaUdaja() != null){
            HSSFCell cell = row.createCell(40);
            cell.setCellValue(udaj.getStranaUdaja());
        }
        
        // Poznamka k lokalite
        if (udaj.getLokality() != null && udaj.getLokality().getPoznamkaLok() != null){
            HSSFCell cell = row.createCell(41);
            cell.setCellValue(udaj.getLokality().getPoznamkaLok());
        }
        
        // Poznamka k literature
        if (udaj.getLitZdroj() != null && udaj.getLitZdroj().getPoznamka() != null){
            HSSFCell cell = row.createCell(42);
            cell.setCellValue(udaj.getLitZdroj().getPoznamka());
        }
        
        // Pristup k udaju
        HSSFCell cellPristup = row.createCell(43);
        if (udaj.isVerejnePristupny() == true){
            cellPristup.setCellValue("V");
        } else if (udaj.getVerejnePristupnyOd() != null){
            cellPristup.setCellValue(udaj.getVerejnePristupnyOd());
        } else {
            cellPristup.setCellValue("N");
        }
        
        // Údaje o revízii
        List<SkupRev> rev = udaj.getRevisions();
        if (rev != null && rev.size() > 0){
            boolean isFirstRevision = true;
            for (Object object : rev){
                SkupRev sr = (SkupRev) object;

                HSSFRow rowRevision;
                if (!isFirstRevision){
                    lastRowNumber++;
                    rowRevision = sheet.createRow(lastRowNumber);
                } else {
                    rowRevision = sheet.getRow(lastRowNumber);
                    isFirstRevision = false;
                }
                
                if (sr.getMenaTaxonov() != null && sr.getMenaTaxonov().getMenoScheda() != null){
                    HSSFCell cell = rowRevision.createCell(23);
                    cell.setCellValue(sr.getMenaTaxonov().getMenoScheda());
                }
                
                if (sr.getMenaTaxonov() != null && sr.getMenaTaxonov().getListOfSpecies() != null && sr.getMenaTaxonov().getListOfSpecies().getMeno() != null){
                    HSSFCell cell = rowRevision.createCell(24);
                    cell.setCellValue(sr.getMenaTaxonov().getListOfSpecies().getMeno());
                }
                
                if (sr.getMenaTaxonov() != null && sr.getMenaTaxonov().getListOfSpecies() != null && sr.getMenaTaxonov().getListOfSpecies().getAutori() != null){
                    HSSFCell cell = rowRevision.createCell(25);
                    cell.setCellValue(sr.getMenaTaxonov().getListOfSpecies().getAutori());
                }
                
                if (sr.getSkupRevDets() != null){
                    HSSFCell cell = rowRevision.createCell(26);
                    String autoriRevizie = "";
                    for (Object obj : sr.getSkupRevDets()){
                        SkupRevDet srd = (SkupRevDet) obj;
                        autoriRevizie = autoriRevizie.concat(srd.getMenaZberRev().getMeno()).concat(", ");
                    }
                    if (!autoriRevizie.equals("")){
                        autoriRevizie = autoriRevizie.substring(0, autoriRevizie.length()-2);
                    }
                    cell.setCellValue(autoriRevizie);
                }
                
                if (sr.getDatum() != null){
                    HSSFCell cell = rowRevision.createCell(27);
                    cell.setCellValue(sr.getDatum());
                }
            }
        }
        
        lastRowNumber++;
        return lastRowNumber;
        
    }

    // zapis terenneho udaju do excelu - zakladne udaje + poznamka k lokalite + pristup k udaju
    private int writeExcelNewTerenUdaj(HSSFSheet sheet, int lastRowNumber, Udaj udaj) {
        
        HSSFRow row = sheet.createRow(lastRowNumber);
        
        exportExcelZakladneUdaje(row, udaj);
        
        // Poznamka k lokalite
        if (udaj.getLokality() != null && udaj.getLokality().getPoznamkaLok() != null){
            HSSFCell cell = row.createCell(32);
            cell.setCellValue(udaj.getLokality().getPoznamkaLok());
        }
        
        // Pristup k udaju
        HSSFCell cell = row.createCell(33);
        if (udaj.isVerejnePristupny() == true){
            cell.setCellValue("V");
        } else if (udaj.getVerejnePristupnyOd() != null){
            cell.setCellValue(udaj.getVerejnePristupnyOd());
        } else {
            cell.setCellValue("N");
        }
        
        return lastRowNumber++;
    }

    // cast, ktora nastavuje do excelu spolocne(zakladne) data pre dany riadok
    private void exportExcelZakladneUdaje(HSSFRow row, Udaj udaj) {
        // Nazov taxonu zo schedy
        if (udaj.getUrcenie() != null && udaj.getUrcenie().getMenaTaxonov() != null && udaj.getUrcenie().getMenaTaxonov().getMenoScheda() != null){
            HSSFCell cell = row.createCell(0);
            cell.setCellValue(udaj.getUrcenie().getMenaTaxonov().getMenoScheda());
        }
        
        // Štandardizované znenie mena
        if (udaj.getUrcenie() != null && udaj.getUrcenie().getMenaTaxonov() != null && udaj.getUrcenie().getMenaTaxonov().getListOfSpecies() != null && udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getMeno() != null){
            HSSFCell cell = row.createCell(1);
            cell.setCellValue(udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getMeno());
        }
        
        // Autorské skratky
        if (udaj.getUrcenie() != null && udaj.getUrcenie().getMenaTaxonov() != null && udaj.getUrcenie().getMenaTaxonov().getListOfSpecies() != null && udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getAutori() != null){
            HSSFCell cell = row.createCell(2);
            cell.setCellValue(udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getAutori());
        }
        
        // Krajina (Brummitt 4)
        if (udaj.getLokality() != null && udaj.getLokality().getBrumit4() != null && udaj.getLokality().getBrumit4().getMeno() != null){
            
            HSSFCell cell = row.createCell(3);
            cell.setCellValue(udaj.getLokality().getBrumit4().getMeno());
        }
        
        // Fytogeografický okres
        if (udaj.getLokality() != null){
            HSSFCell cell = row.createCell(4);
            String ftgokresy = "";
            for (Object object : udaj.getLokality().getLokalityFtgokresAsocs()){
                LokalityFtgokresAsoc lfa = (LokalityFtgokresAsoc) object;
                ftgokresy = ftgokresy.concat(lfa.getFtgokres().getCislo()).concat(" / ");
            }
            if (!ftgokresy.equals("")){
                ftgokresy = ftgokresy.substring(0, ftgokresy.length()-3);
            }
            cell.setCellValue(ftgokresy);
        }
        
        // Nizsi geograficky celok
        if (udaj.getLokality() != null && udaj.getLokality().getNgc() != null){ //&& udaj.getLokality().getNgc().getMeno() != null
            
            Lokality ngc = udaj.getLokality();
            HSSFCell cell = row.createCell(5);
            cell.setCellValue(udaj.getLokality().getNgc().getMeno());
        }

        // Najbližšia obec
        if (udaj.getLokality() != null && udaj.getLokality().getObec() != null && udaj.getLokality().getObec().getMeno() != null){
            HSSFCell cell = row.createCell(6);
            cell.setCellValue(udaj.getLokality().getObec().getMeno());
        }

        // Opis lokality
        if (udaj.getLokality() != null && udaj.getLokality().getOpisLokality() != null){
            HSSFCell cell = row.createCell(7);
            cell.setCellValue(udaj.getLokality().getOpisLokality());
        }
        
        // cca
        if (udaj.getLokality() != null && udaj.getLokality().isAltOdCca()){
            HSSFCell cell = row.createCell(8);
            if (udaj.getLokality().isAltOdCca() == true){
                cell.setCellValue("cca");
            }
        }
        
        // Nadm. výška OD
        if (udaj.getLokality() != null && udaj.getLokality().getAltOd() != null){
            HSSFCell cell = row.createCell(9);
            cell.setCellValue(udaj.getLokality().getAltOd());
        }
        
        // Nadm. výška DO
        if (udaj.getLokality() != null && udaj.getLokality().getAltDo() != null){
            HSSFCell cell = row.createCell(10);
            cell.setCellValue(udaj.getLokality().getAltDo());
        }
        
        // Kvadrant
        if (udaj.getLokality() != null){
            HSSFCell cell = row.createCell(11);
            String kvadranty = "";
            for (Object object : udaj.getLokality().getLokalityKvadrantAsocs()){
                LokalityKvadrantAsoc lka = (LokalityKvadrantAsoc) object;
                kvadranty = kvadranty.concat(lka.getKvadrant().getMeno()).concat(" / ");
            }
            if (!kvadranty.equals("")){
                kvadranty = kvadranty.substring(0, kvadranty.length()-3);
            }
            cell.setCellValue(kvadranty);
        }

        // Zemepisná šírka
        if (udaj.getLokality() != null && udaj.getLokality().getLatitude() != null){
            HSSFCell cell = row.createCell(12);
            cell.setCellValue(HandyUtils.doubleToCoordinates(udaj.getLokality().getLatitude()));
        }
        
        // Zemepisná dĺžka
        if (udaj.getLokality() != null && udaj.getLokality().getLongitude() != null){
            HSSFCell cell = row.createCell(13);
            cell.setCellValue(HandyUtils.doubleToCoordinates(udaj.getLokality().getLongitude()));
        }
        
        // Autor zberu / záznamu
        HSSFCell cellAZ = row.createCell(14);
        String zberatelia = "";
        for (Object object : udaj.getUdajZberAsocs()){
            UdajZberAsoc uza = (UdajZberAsoc) object;
            zberatelia = zberatelia.concat(uza.getMenaZberRev().getMeno()).concat(", ");
        }
        if (!zberatelia.equals("")){
            zberatelia = zberatelia.substring(0, zberatelia.length()-2);
        }
        cellAZ.setCellValue(zberatelia);

        
        // Dátum zberu
        if (udaj.getDatumZberu() != null){
            HSSFCell cell = row.createCell(15);
            cell.setCellValue(udaj.getDatumZberu());
        }
        
        // Dátum zberu slovom
        if (udaj.getDatumZberuSlovom() != null){
            HSSFCell cell = row.createCell(16);
            cell.setCellValue(udaj.getDatumZberuSlovom());
        }
        
        // Autori urcenia
        if (udaj.getUrcenie() != null){
            HSSFCell cell = row.createCell(17);
            String autoriUrcenia = "";
            for (Object object : udaj.getUrcenie().getSkupRevDets()){
                SkupRevDet srd = (SkupRevDet) object;
                autoriUrcenia = autoriUrcenia.concat(srd.getMenaZberRev().getMeno()).concat(", ");
            }
            if (!autoriUrcenia.equals("")){
                autoriUrcenia = autoriUrcenia.substring(0, autoriUrcenia.length()-2);
            }
            cell.setCellValue(autoriUrcenia);
        }
    }

    // cast, ktora nastavuje do excelu literarne data pre dany riadok
    private void exportExcelLiteratura(HSSFRow row, LitZdroj litZdroj, int startCell) {
        
        if (litZdroj != null){
            // Autori publikacie
                HSSFCell cellAutori = row.createCell(startCell);
                String autori = "";
                for (Object object : litZdroj.getLzdrojAutoriAsocs()){
                    LzdrojAutoriAsoc lzaa = (LzdrojAutoriAsoc) object;
                    autori = autori.concat(lzaa.getMenaZberRev().getMeno()).concat(", ");
                }
                if (!autori.equals("")){
                    autori = autori.substring(0, autori.length()-2);
                }
                cellAutori.setCellValue(autori);

            // Rok vydania
            if (litZdroj.getRok() != null){
                HSSFCell cell = row.createCell(startCell+1);
                cell.setCellValue(litZdroj.getRok());
            }

            // Casopis
            if (litZdroj.getCasopis() != null && litZdroj.getCasopis().getMeno() != null){
                HSSFCell cell = row.createCell(startCell+2);
                cell.setCellValue(litZdroj.getCasopis().getMeno());
            }

            // Rocnik casopisu
            if (litZdroj.getRocnik() != null){
                HSSFCell cell = row.createCell(startCell+3);
                cell.setCellValue(litZdroj.getRocnik());
            }

            // Cislo casopisu
            if (litZdroj.getCislo() != null){
                HSSFCell cell = row.createCell(startCell+4);
                cell.setCellValue(litZdroj.getCislo());
            }

            // Nazov clanku
            if (litZdroj.getNazovClanku() != null){
                HSSFCell cell = row.createCell(startCell+5);
                cell.setCellValue(litZdroj.getNazovClanku());
            }

            // Pramen
            if (litZdroj.getPramen() != null){
                HSSFCell cell = row.createCell(startCell+6);
                cell.setCellValue(litZdroj.getPramen());
            }

            // Editori publikacie
                HSSFCell cellEditori = row.createCell(startCell+7);
                String editori = "";
                for (Object object : litZdroj.getLzdrojEditoriAsocs()){
                    LzdrojEditoriAsoc lzea = (LzdrojEditoriAsoc) object;
                    editori = editori.concat(lzea.getMenaZberRev().getMeno()).concat(", ");
                }
                if (!editori.equals("")){
                    editori = editori.substring(0, editori.length()-2);
                }
                cellEditori.setCellValue(editori);

            // Nazov publikacie / knihy
            if (litZdroj.getNazovKnihy() != null){
                HSSFCell cell = row.createCell(startCell+8);
                cell.setCellValue(litZdroj.getNazovKnihy());
            }

            // Nazov kapitoly
            if (litZdroj.getNazovKapitoly() != null){
                HSSFCell cell = row.createCell(startCell+9);
                cell.setCellValue(litZdroj.getNazovKapitoly());
            }

            // Vydavatel
            if (litZdroj.getVydavatel() != null){
                HSSFCell cell = row.createCell(startCell+10);
                cell.setCellValue(litZdroj.getVydavatel());
            }

            // Strany publikacie
            if (litZdroj.getStrany() != null){
                HSSFCell cell = row.createCell(startCell+11);
                cell.setCellValue(litZdroj.getStrany());
            }
        }
    }

    // metoda, ktora vobrazuje okno s exportom a eventualne nacita data
    public void displayForm() {
        
        //this.setAlwaysOnTop(true);
        this.setVisible(true);
        
        // data nacitavame iba v tom pripade, ak table model este neexistoval(nie je instanciou RecordsInsertedModel)
        if (!(filterRecordsExportOverview.getRecordsOverviewTable().getModel() instanceof RecordsInsertedModel)){
            filterRecordsExportOverview.loadFiltersAndData("export");
        }
    }

    private void writeUdajToScheda(Udaj udaj, int udajNumber, HSSFSheet schedaSheet) {
        
        if (schedaSheet == null) {
            log.error("writeUdajToScheda: supplied schedaSheet is NULL");
            throw new NullPointerException("scheda");
        }
        
        int initRow = ((udajNumber % 6) / 3) * 19; //scheda zacina bud na 0. alebo 19. riadku (cislo strany -> cislo radu)
        int initColumn = (udajNumber % 3) * 7; // kazdych 7 stplpcov zacina nova scheda (3 vedla seba)
        
        // ak je flora nevyplnena a v brumite4 je uvedene Slovakia, tak flora sa vyexportuje ako Slovakiae
        String flora = "";
        if (udaj.getLokality() == null || udaj.getLokality().getFlora() == null || udaj.getLokality().getFlora().getMeno() == null){
            if (udaj.getLokality() != null && udaj.getLokality().getBrumit4() != null && udaj.getLokality().getBrumit4().getMeno().equals("Slovakia")){
                flora = "Slovakiae";
            }
        } else {
            flora = udaj.getLokality().getFlora().getMeno();
        }
        schedaSheet.getRow(initRow+5).getCell(initColumn+2).setCellValue(flora);

        String losMeno = (udaj.getUrcenie() == null || udaj.getUrcenie().getMenaTaxonov() == null || udaj.getUrcenie().getMenaTaxonov().getListOfSpecies() == null) ? "" : udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getMeno();
        String losAutori = (udaj.getUrcenie() == null || udaj.getUrcenie().getMenaTaxonov() == null || udaj.getUrcenie().getMenaTaxonov().getListOfSpecies() == null || udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getAutori() == null) ? "" : udaj.getUrcenie().getMenaTaxonov().getListOfSpecies().getAutori();
        
        RichTextString losRichString = new HSSFRichTextString(losMeno + " " + losAutori);
        if (losMeno.length() > 0 && losAutori.length() > 0){
            Font fontBold = schedaSheet.getWorkbook().createFont();
            fontBold.setBoldweight(Font.BOLDWEIGHT_BOLD);
            fontBold.setFontHeightInPoints((short)12);

            Font fontNormal = schedaSheet.getWorkbook().createFont();
            fontNormal.setBoldweight(Font.BOLDWEIGHT_NORMAL);
            fontNormal.setFontHeightInPoints((short)10);

            losRichString.applyFont( 0, losMeno.length(), fontBold );
            losRichString.applyFont( losMeno.length() + 1, losMeno.length() + losAutori.length() -1, fontNormal );
        }
        schedaSheet.getRow(initRow+7).getCell(initColumn+1).setCellValue(losRichString);

        String ftgOkres = "";
        if (udaj.getLokality() != null){
            for (Object object : udaj.getLokality().getLokalityFtgokresAsocs()){
                LokalityFtgokresAsoc lfa = (LokalityFtgokresAsoc) object;
                ftgOkres = ftgOkres.concat(lfa.getFtgokres().getMeno()).concat("/");
            }
            if (!ftgOkres.equals("")){
                ftgOkres = ftgOkres.substring(0, ftgOkres.length()-1);
            }
        }
        String obec = (udaj.getLokality() == null || udaj.getLokality().getObec() == null) ? "" : udaj.getLokality().getObec().getMeno();
        String opisLok = (udaj.getLokality() == null || udaj.getLokality().getOpisLokality() == null) ? "" : udaj.getLokality().getOpisLokality();
        String kvadrant = "";
        if (udaj.getLokality() != null){
            for (Object object : udaj.getLokality().getLokalityKvadrantAsocs()){
                LokalityKvadrantAsoc lka = (LokalityKvadrantAsoc) object;
                kvadrant = kvadrant.concat(lka.getKvadrant().getMeno()).concat("/");
            }
            if (!kvadrant.equals("")){
                kvadrant = kvadrant.substring(0, kvadrant.length()-1);
            }
        }
        String coordLok = (udaj.getLokality() == null || udaj.getLokality().getLatitude() == null || udaj.getLokality().getLongitude() == null) ? "" : HandyUtils.doubleToCoordinates(udaj.getLokality().getLatitude()) + "N, " + HandyUtils.doubleToCoordinates(udaj.getLokality().getLongitude()) +"E";
        if (!ftgOkres.isEmpty() && !(obec.isEmpty() && opisLok.isEmpty() && kvadrant.isEmpty() && coordLok.isEmpty())){ ftgOkres = ftgOkres + ", ";}
        if (!obec.isEmpty() && !(opisLok.isEmpty() && kvadrant.isEmpty() && coordLok.isEmpty())){ obec = obec + ", ";}
        if (!opisLok.isEmpty() && !(kvadrant.isEmpty() && coordLok.isEmpty())){ opisLok = opisLok + ", ";}
        if (!kvadrant.isEmpty() && !coordLok.isEmpty()){ kvadrant = kvadrant + ", ";}
        schedaSheet.getRow(initRow+9).getCell(initColumn+1).setCellValue("Loc.: " + ftgOkres + obec + opisLok + kvadrant + coordLok);
        
        String alt = "";
        if (udaj.getLokality() != null && udaj.getLokality().getAltDo() != null && !udaj.getLokality().getAltDo().toString().isEmpty()){
            alt = udaj.getLokality().getAltOd().toString() + "-" + udaj.getLokality().getAltDo().toString() +" m";
        } else if (udaj.getLokality() != null && udaj.getLokality().getAltOd() != null && !udaj.getLokality().getAltOd().toString().isEmpty()){
            alt = udaj.getLokality().getAltOd().toString() + " m";
        }
        schedaSheet.getRow(initRow+10).getCell(initColumn+3).setCellValue(alt);

        String zberatelia = "";
        if (udaj.getUdajZberAsocs() != null){
            for (Object object : udaj.getUdajZberAsocs()) {
                if (object instanceof UdajZberAsoc) {

                    UdajZberAsoc uza = (UdajZberAsoc) object;
                    //pre lepsiu citatelnost pridame ciarku medzi jednotlivymi menami a ak bola ciarka aj po priezvisku, tak tu odstranime
                    zberatelia = zberatelia.concat(uza.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                }
            }
            if (!zberatelia.equals("")){
                zberatelia = zberatelia.substring(0, zberatelia.length()-2);
            }
        }
        schedaSheet.getRow(initRow+11).getCell(initColumn+2).setCellValue(zberatelia);

        schedaSheet.getRow(initRow+13).getCell(initColumn+2).setCellValue(HandyUtils.convertStringToDate(udaj.getDatumZberu()));

        String autoriUrcenia = "";
        if (udaj.getUrcenie() != null){
            if (udaj.getUrcenie().getSkupRevDets() != null){
                for (Object object : udaj.getUrcenie().getSkupRevDets()) {
                    SkupRevDet srd = (SkupRevDet) object;
                    autoriUrcenia = autoriUrcenia.concat(srd.getMenaZberRev().getMeno().replace(",", "")).concat(", ");
                }
                if (!autoriUrcenia.equals("")){
                    autoriUrcenia = autoriUrcenia.substring(0, autoriUrcenia.length()-2);
                }
            }
        }
        schedaSheet.getRow(initRow+15).getCell(initColumn+2).setCellValue(autoriUrcenia);

        String date = udaj.getUrcenie() == null ? "" : HandyUtils.convertStringToDate(udaj.getUrcenie().getDatum());
        schedaSheet.getRow(initRow+17).getCell(initColumn+2).setCellValue(date);
    }
    
    // akcia na zatvorenie exportoveho okna
    private class BtnCloseAction extends AbstractAction {

        @Override
        public void actionPerformed(ActionEvent e) {
            ExportDataForm.this.setVisible(false);
        }
    }
    
    
    // -- SwingWorker vlakna --
    
    // vlakno na zapis exportovanych dat do suborov
    class WritingExportTask extends SwingWorker<Void, Void> {

        boolean successful = true;
        
        @Override
        public Void doInBackground() {
            
            try {
                List<Udaj> udaje = ((RecordsInsertedModel) filterRecordsExportOverview.getRecordsOverviewTable().getModel()).getData();
                if (rbExportExcel.isSelected()){
                    writeToExcelFile(txtExportDirPath.getText(), udaje);
                } else if (rbExportWordFlora.isSelected()){
                    writeToFlora(txtExportDirPath.getText(), udaje);
                } else if (rbExportWordScheda.isSelected()){
                    writeToScheda(txtExportDirPath.getText(), udaje);
                }
            
            } catch (FileNotFoundException e) {
                log.error("Export problem. Cannot write to specified file. "+e);
                JOptionPane.showMessageDialog(loadingDialog, String.format(" Export dát sa nepodaril! \n Nastal problém so zápisom dát do zvoleného súboru. \n" + e.getLocalizedMessage()));
                successful = false;
            } catch (IOException e) {
                log.error("Export problem. Problem during writing data to file. "+e);
                JOptionPane.showMessageDialog(loadingDialog, String.format(" Export dát sa nepodaril! \n Vyskytol sa problém pri zápise dát. \n" + e.getLocalizedMessage()));
                successful = false;
            } catch (InvalidFormatException e) {
                log.error("Export problem. Issue with file format. "+e);
                JOptionPane.showMessageDialog(loadingDialog, String.format(" Export dát sa nepodaril! \n Problém s formátom súborov. \n" + e.getLocalizedMessage()));
                successful = false;          
            } catch (Exception e){
                log.error("Export problem. Unexpected exception during export. "+e);
                JOptionPane.showMessageDialog(loadingDialog, " Export dát sa nepodaril! \n Nastala neočakávaná chyba. \n" + e.getLocalizedMessage());
                successful = false; 
            }
            return null;
        }

        @Override
        public void done() {
            loadingDialog.setVisible(false);
            if (successful){
                log.info("Export successfully done.");
                JOptionPane.showMessageDialog(null, String.format("Export údajov bol úspešne vykonaný."));
            }
        }
    }
}

class CellRangeAddressWrapper implements Comparable<CellRangeAddressWrapper> {
  
    public CellRangeAddress range;

    /**
     * @param theRange the CellRangeAddress object to wrap.
     */
    public CellRangeAddressWrapper(CellRangeAddress theRange) {
          this.range = theRange;
    }

    /**
     * @param o the object to compare.
     * @return -1 the current instance is prior to the object in parameter, 0: equal, 1: after...
     */
    public int compareTo(CellRangeAddressWrapper o) {

        if (range.getFirstColumn() < o.range.getFirstColumn()
                    && range.getFirstRow() < o.range.getFirstRow()) {
              return -1;
        } else if (range.getFirstColumn() == o.range.getFirstColumn()
                    && range.getFirstRow() == o.range.getFirstRow()) {
              return 0;
        } else {
              return 1;
        }

    }

}